{"version":3,"sources":["modules/auth/actions.js","modules/auth/reducer.js","Helpers/scoreHelper.js","modules/spotify/selectors.js","modules/spotify/actions.js","modules/loading/reducer.js","common.js","modules/spotify/reducer.js","modules/reducer.js","modules/middleware/spotifyDataTriggerMiddleware.js","modules/middleware/isProcessingMiddleware.js","modules/middleware/unauthorizedMiddleware.js","modules/middleware/toastrMiddleware.js","modules/middleware.js","config.js","Containers/LoginContainer.jsx","Containers/LoadingUserContainer.jsx","QuasiTracks/FeatureSlider.jsx","QuasiTracks/FeatureSidebar.jsx","Enums/QueryType.js","Components/Search/SearchInput.jsx","Components/Search/SearchForm.jsx","Components/Base/TableLoader.jsx","Components/Base/ReactTable.jsx","Components/Tables/TrackAnalysisResultsTable.jsx","Components/Tables/ArtistsResultsTable.jsx","Components/Modals/SelectArtistModal.jsx","Components/Tables/AlbumSearchResultsTable.jsx","Components/Modals/SelectAlbumModal.jsx","Components/Tables/PublicPlaylistSearchResultsTable.jsx","Components/Modals/SelectPublicPlaylistModal.jsx","Components/Modals/FeatureModal.jsx","Helpers/modalHelpers.js","Containers/AppContainer.jsx","App.jsx","index.jsx"],"names":["authActions","authActionCreators","setAccessToken","accessToken","type","payload","initState","calculateEuclideanDistance","a","b","properties","summedSquaredScores","_","reduce","acc","property","Math","pow","Number","sqrt","toFixed","getTracks","state","spotify","tracks","getSelectedTracks","selectedTracks","getParameters","parameters","getActiveParameterKeys","createSelector","keys","each","_ref","active","push","getParameterValueDictionary","dictionary","_ref2","value","getTrackResults","audioFeatures","parameterDictionary","activeParameterKeys","map","track","currentTrackFeatures","get","id","Object","objectSpread","score","areAllTracksSelected","currentUserPlaylists","playlist","label","name","isEmpty","some","_ref3","has","size","every","_ref4","CURRENT_USER_PLAYLISTS_PAGE_SIZE","spotifyActions","UNAUTHORIZED","GLOBAL_CHECKBOX_SELECTED","SELECT_ARTIST","SELECT_ALBUM","SELECT_PUBLIC_PLAYLIST","TOGGLE_TRACK_SELECTED","TOGGLE_IS_ACTIVE","SET_REFERENCE_VALUE","SELECT_CURRENT_USER_PLAYLIST","LOADED_ARTIST_ALBUMS","RESET_FEATURES_TO_REFERENCE_SONG","START_PROCESSING","FINISHED_PROCESSING","LOAD_ALBUM_TRACKS","LOAD_PLAYLIST_TRACKS","LOADED_TRACK_AUDIO_FEATURES","LOAD_ARTIST_ALBUMS","LOAD_TRACK_AUDIO_FEATURES","LOAD_ALBUM","SELECT_TRACKS","GET_CURRENT_USER_REQUEST","GET_CURRENT_USER_SUCCESS","GET_CURRENT_USER_FAILURE","GET_CURRENT_USERS_PLAYLISTS_REQUEST","GET_CURRENT_USERS_PLAYLISTS_SUCCESS","GET_CURRENT_USERS_PLAYLISTS_FAILURE","SEARCH_FOR_TRACKS_REQUEST","SEARCH_FOR_TRACKS_SUCCESS","SEARCH_FOR_TRACKS_FAILURE","SEARCH_FOR_ARTISTS_REQUEST","SEARCH_FOR_ARTISTS_SUCCESS","SEARCH_FOR_ARTISTS_FAILURE","SEARCH_FOR_ALBUMS_REQUEST","SEARCH_FOR_ALBUMS_SUCCESS","SEARCH_FOR_ALBUMS_FAILURE","SEARCH_FOR_PUBLIC_PLAYLISTS_REQUEST","SEARCH_FOR_PUBLIC_PLAYLISTS_SUCCESS","SEARCH_FOR_PUBLIC_PLAYLISTS_FAILURE","START_PLAYING_TRACK_REQUEST","START_PLAYING_TRACK_SUCCESS","START_PLAYING_TRACK_FAILURE","CREATE_PLAYLIST_REQUEST","CREATE_PLAYLIST_SUCCESS","CREATE_PLAYLIST_FAILURE","ADD_TRACKS_TO_PLAYLIST_REQUEST","ADD_TRACKS_TO_PLAYLIST_SUCCESS","ADD_TRACKS_TO_PLAYLIST_FAILURE","getAllCurrentUsersPlaylists","_callee10","spotifyApi","allPlaylists","page","_ref14","playlists","next","regenerator_default","wrap","_context10","prev","getUserPlaylists","limit","offset","sent","items","abrupt","stop","spotifyActionCreators","toggleIsActive","toggleTrackSelected","globalCheckboxSelected","dispatch","getState","allRowsAreSelected","shouldSelectAll","setReferenceValue","resetFeaturesToReferenceSong","artist","startProcessing","artistId","finishedProcessing","selectArtist","selectAlbum","album","selectPublicPlaylist","selectCurrentUserPlaylist","getCurrentUser","asyncToGenerator","mark","_callee","_getState","currentUser","_context","getMe","t0","statusCode","status","_x","_x2","apply","this","arguments","getCurrentUsersPlaylists","_callee2","_getState2","_getState2$spotify","playlistsOwnedByCurrentUser","_context2","filter","_x3","_x4","searchForAlbums","query","pagination","length","undefined","_ref7","_callee5","_getState5","_ref8","albums","_context5","searchAlbums","e","_x9","_x10","searchForTracks","_callee3","_getState3","_context3","searchTracks","_x5","_x6","searchForArtists","_ref5","_callee4","_getState4","_ref6","artists","_context4","searchArtists","_x7","_x8","searchForPublicPlaylists","_ref9","_callee6","_getState6","_ref10","_context6","searchPlaylists","_x11","_x12","startPlayingTrack","uri","_ref11","_callee7","_getState7","result","_context7","getMyCurrentPlaybackState","message","play","uris","console","log","_x13","_x14","createNewPlaylist","_ref12","_callee8","_getState8","_getState8$spotify","createdPlaylist","_context8","window","confirm","concat","createPlaylist","public","_x15","_x16","addTracksToPlaylist","playlistId","trackUris","_ref13","_callee9","_getState9","_context9","_x17","_x18","isLoadingArtists","isLoadingAlbums","isLoadingPublicPlaylists","sOrNoS","countOrArray","isObjectLike","parameterDefaults","min","max","step","AudioFeatureDescriptions","clearSearchState","searchedArtists","searchedAlbums","SpotifyWebApi","queue","PQueue","concurrency","intervalCap","interval","isProcessing","searchedText","selectedPlaylist","searchedPlaylists","acousticness","description","danceability","energy","instrumentalness","liveness","speechiness","valence","parametersAreDirty","transformPlaylist","combineReducers","auth","action","loading","sortBy","toLower","followers","images","popularity","href","releaseDate","release_date","totalTracks","total_tracks","owner","total","react_default","createElement","dtos","trackNumber","track_number","keyBy","defineProperty","_action$payload","_action$payload2","find","toastr","success","redirect","_artist","_album","_page","_spotify","_spotify2","_action$payload3","_playlist","_page2","_spotify3","add","Promise","resolve","getArtistAlbums","include_groups","_next2","getAlbumTracks","getAudioFeaturesForTracks","audio_features","reject","_next3","_tracks","getPlaylistTracks","item","debouncedDoneProcessing","debounce","isProcessingMiddleware","unauthorizedMiddleware","location","origin","toastrMiddleware","endsWith","clear","error","timeOut","extendedTimeOut","applyMiddleware","spotifyDataTriggerMiddleware","thunk","config","SpotifyClientId","CallbackUri","includes","host","Scopes","join","LoginContainer","redirectToLogin","Config","encodeURI","Container","fluid","Row","Col","xl","className","onClick","React","PureComponent","LoadingUserContainer","FeatureSlider","_this","props","_this$props","rest","objectWithoutProperties","assign","onDoubleClick","classnames","inactive-feature-slider-label","UncontrolledPopover","placement","target","trigger","PopoverHeader","PopoverBody","component_default","checked","onChange","rc_slider_es","disabled","mapDispatchToProps","connect","selectedTrack","style","flex","flexGrow","overflowX","overflowY","paddingLeft","paddingRight","analysis","key","QuasiTracks_FeatureSlider","marginBottom","QueryType","Artist","Album","PublicPlaylist","QueryTypes","KeyedQueryTypes","SearchInput","setQuery","queryType","setQueryType","_useState","useState","_useState2","slicedToArray","isDropdownOpen","setIsDropdownOpen","InputGroup","Input","bsSize","placeholder","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","submitArtistSearch","_useState3","_useState4","Form","onSubmit","Search_SearchInput","display","alignItems","marginTop","margin","Button","color","TableLoader","loadingText","ReactTable","onRef","options","minRows","showPageJump","showPageSizeOptions","LoadingComponent","pageSize","react_table_es","ref","TrackAnalysisResultsTable","renderCheckbox","original","isSelected","readOnly","renderPlayButton","preventDefault","stopPropagation","_this2","isLoading","allTracksAreSelected","data","columns","Header","lib_default","indeterminate","Cell","width","filterable","sortable","resizable","accessor","getTrProps","setIsSelected","defaultSorted","Base_ReactTable","tableId","withSizes","isMobile","onSelect","show","padding","memo","Modal","hide","ModalHeader","ModalBody","md","Tables_ArtistsResultsTable","AlbumSearchResultsTable","Tables_AlbumSearchResultsTable","PublicPlaylistSearchResultsTable","display_name","Tables_PublicPlaylistSearchResultsTable","QuasiTracks_FeatureSidebar","showProp","prevProps","nextProps","shouldModalUpdate","AppContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","submitSearch","showSearchModal","showFeatureModal","setState","isShowingFeatureModal","hideFeatureModal","trim","hideSearchModal","selectSongModalShowing","selectArtistModalShowing","_this$state","_this$props2","noResults","Fragment","height","flexDirection","paddingTop","paddingBottom","maxWidth","Search_SearchForm","justifyContent","ReactIf","condition","react_select_browser_esm","onCreateOption","styles","menu","base","zIndex","formatCreateLabel","classNamePrefix","Tables_TrackAnalysisResultsTable","rel","Modals_SelectArtistModal","searchQuery","Modals_SelectAlbumModal","Modals_SelectPublicPlaylistModal","Modals_FeatureModal","App","prevState","snapshot","currentUserIsLoaded","userIsLoggedIn","Containers_LoginContainer","Containers_LoadingUserContainer","Containers_AppContainer","getQueryVariable","hash","substring","queryString","variable","vars","split","i","pair","decodeURIComponent","store","createStore","reducer","composeWithDevTools","middleware","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7c6de02c.chunk.js","sourcesContent":["export const authActions = {\r\n  SET_ACCESS_TOKEN: 'quasiTracks/auth/setAccessToken',\r\n};\r\n\r\nexport const setAccessToken = (accessToken) => ({\r\n  type: authActions.SET_ACCESS_TOKEN,\r\n  payload: {\r\n    accessToken: accessToken,\r\n  },\r\n});\r\n\r\nexport const authActionCreators = {\r\n  setAccessToken: setAccessToken,\r\n};\r\n","import { authActions } from './actions';\r\n\r\nconst initState = {\r\n  accessToken: null,\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case authActions.SET_ACCESS_TOKEN: {\r\n      const { accessToken } = action.payload;\r\n\r\n      return { ...state, accessToken: accessToken };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import _ from 'lodash';\r\n\r\nexport const calculateEuclideanDistance = (a, b, properties) => {\r\n  const summedSquaredScores = _.reduce(properties, (acc, property) => {\r\n    return acc + Math.pow(a[property] - b[property], 2);\r\n  }, 0);\r\n\r\n  return Number(Math.sqrt(summedSquaredScores).toFixed(3));\r\n};\r\n","import _ from 'lodash';\nimport { createSelector } from 'reselect';\nimport { calculateEuclideanDistance } from '../../Helpers/scoreHelper';\n\nconst getTracks = (state) => state.spotify.tracks;\nconst getSelectedTracks = (state) => state.spotify.selectedTracks;\nconst getCurrentUserPlaylists = (state) => state.spotify.currentUserPlaylists;\nconst getAudioFeatures = (state) => state.spotify.audioFeatures;\nconst getParameters = (state) => state.spotify.parameters;\n\nexport const getActiveParameterKeys = createSelector([getParameters], (parameters) => {\n  const keys = [];\n\n  _.each(parameters, ({ active }, property) => {\n    if (!active) {\n      return;\n    }\n\n    return keys.push(property);\n  });\n\n  return keys;\n});\n\nexport const getParameterValueDictionary = createSelector([getParameters], (parameters) => {\n  const dictionary = {};\n\n  _.each(parameters, ({ value }, property) => {\n    dictionary[property] = value;\n  });\n\n  return dictionary;\n});\n\nexport const getTrackResults = createSelector([getTracks, getAudioFeatures, getParameterValueDictionary, getActiveParameterKeys], (tracks, audioFeatures, parameterDictionary, activeParameterKeys) => {\n  return _.map(tracks, (track) => {\n    const currentTrackFeatures = _.get(audioFeatures, track.id, null);\n\n    return {\n      ...track,\n      score: currentTrackFeatures ? calculateEuclideanDistance(currentTrackFeatures, parameterDictionary, activeParameterKeys) : null,\n    };\n  });\n});\n\nexport const getCurrentUserPlaylistOptions = createSelector([getCurrentUserPlaylists], (currentUserPlaylists) => {\n  return _.map(currentUserPlaylists, (playlist) => {\n    return {\n      ...playlist, label: playlist.name, value: playlist.id,\n    };\n  });\n});\n\nexport const areSomeTracksSelected = createSelector([getTracks, getSelectedTracks], (tracks, selectedTracks) => {\n  if (_.isEmpty(selectedTracks)) {\n    return false;\n  }\n\n  return _.some(tracks, ({ id }) => _.has(selectedTracks, id));\n});\n\nexport const areAllTracksSelected = createSelector([getTracks, getSelectedTracks], (tracks, selectedTracks) => {\n  if (_.size(tracks) !== _.size(selectedTracks)) {\n    return false;\n  }\n\n  return _.every(tracks, ({ id }) => _.has(selectedTracks, id));\n});\n","import _ from 'lodash';\r\nimport { areAllTracksSelected } from './selectors';\r\nconst CURRENT_USER_PLAYLISTS_PAGE_SIZE = 50;\r\n\r\nexport const spotifyActions = {\r\n  UNAUTHORIZED: 'quasiTracks/spotify/unauthorized',\r\n  GLOBAL_CHECKBOX_SELECTED: 'quasiTracks/spotify/globalCheckboxSelected',\r\n  SELECT_ARTIST: 'quasiTracks/spotify/selectArtist',\r\n  SELECT_ALBUM: 'quasiTracks/spotify/selectAlbum',\r\n  SELECT_PUBLIC_PLAYLIST: 'quasiTracks/spotify/selectPublicPlaylist',\r\n  TOGGLE_TRACK_SELECTED: 'quasiTracks/spotify/toggleTrackSelected',\r\n  TOGGLE_IS_ACTIVE: 'quasiTracks/spotify/toggleIsActive',\r\n  SET_REFERENCE_VALUE: 'quasiTracks/spotify/setReferenceValue',\r\n  SELECT_CURRENT_USER_PLAYLIST: 'quasiTracks/spotify/selectCurrentUserPlaylist',\r\n  LOADED_ARTIST_ALBUMS: 'quasiTracks/spotify/loadedArtistAlbums',\r\n  RESET_FEATURES_TO_REFERENCE_SONG: 'quasiTracks/spotify/resetFeaturesToReferenceSong',\r\n  START_PROCESSING: 'quasiTracks/spotify/startProcessing',\r\n  FINISHED_PROCESSING: 'quasiTracks/spotify/finishedProcessing',\r\n  LOAD_ALBUM_TRACKS: 'quasiTracks/spotify/loadAlbumTracks',\r\n  LOAD_PLAYLIST_TRACKS: 'quasiTracks/spotify/loadPlaylistTracks',\r\n  LOADED_TRACK_AUDIO_FEATURES: 'quasiTracks/spotify/loadedTrackAudioFeatures',\r\n\r\n  LOAD_ARTIST_ALBUMS: 'quasiTracks/spotify/loadArtistAlbums',\r\n  LOAD_TRACK_AUDIO_FEATURES: 'quasiTracks/spotify/loadAudioTrackFeatures',\r\n  LOAD_ALBUM: 'quasiTracks/spotify/loadAlbum',\r\n  SELECT_TRACKS: 'quasiTracks/spotify/selectTracks',\r\n\r\n  GET_CURRENT_USER_REQUEST: 'quasiTracks/spotify/getCurrentUserRequest',\r\n  GET_CURRENT_USER_SUCCESS: 'quasiTracks/spotify/getCurrentUserSuccess',\r\n  GET_CURRENT_USER_FAILURE: 'quasiTracks/spotify/getCurrentUserFailure',\r\n\r\n  GET_CURRENT_USERS_PLAYLISTS_REQUEST: 'quasiTracks/spotify/getCurrentUsersPlaylistsRequest',\r\n  GET_CURRENT_USERS_PLAYLISTS_SUCCESS: 'quasiTracks/spotify/getCurrentUsersPlaylistsSuccess',\r\n  GET_CURRENT_USERS_PLAYLISTS_FAILURE: 'quasiTracks/spotify/getCurrentUsersPlaylistsFailure',\r\n\r\n  SEARCH_FOR_TRACKS_REQUEST: 'quasiTracks/spotify/searchForTracksRequest',\r\n  SEARCH_FOR_TRACKS_SUCCESS: 'quasiTracks/spotify/searchForTracksSuccess',\r\n  SEARCH_FOR_TRACKS_FAILURE: 'quasiTracks/spotify/searchForTracksFailure',\r\n\r\n  SEARCH_FOR_ARTISTS_REQUEST: 'quasiTracks/spotify/searchForArtistsRequest',\r\n  SEARCH_FOR_ARTISTS_SUCCESS: 'quasiTracks/spotify/searchForArtistsSuccess',\r\n  SEARCH_FOR_ARTISTS_FAILURE: 'quasiTracks/spotify/searchForArtistsFailure',\r\n\r\n  SEARCH_FOR_ALBUMS_REQUEST: 'quasiTracks/spotify/searchForAlbumsRequest',\r\n  SEARCH_FOR_ALBUMS_SUCCESS: 'quasiTracks/spotify/searchForAlbumsSuccess',\r\n  SEARCH_FOR_ALBUMS_FAILURE: 'quasiTracks/spotify/searchForAlbumsFailure',\r\n\r\n  SEARCH_FOR_PUBLIC_PLAYLISTS_REQUEST: 'quasiTracks/spotify/searchForPublicPlaylistsRequest',\r\n  SEARCH_FOR_PUBLIC_PLAYLISTS_SUCCESS: 'quasiTracks/spotify/searchForPublicPlaylistsSuccess',\r\n  SEARCH_FOR_PUBLIC_PLAYLISTS_FAILURE: 'quasiTracks/spotify/searchForPublicPlaylistsFailure',\r\n\r\n  START_PLAYING_TRACK_REQUEST: 'quasiTracks/spotify/startPlayingTrackRequest',\r\n  START_PLAYING_TRACK_SUCCESS: 'quasiTracks/spotify/startPlayingTrackSuccess',\r\n  START_PLAYING_TRACK_FAILURE: 'quasiTracks/spotify/startPlayingTrackFailure',\r\n\r\n  CREATE_PLAYLIST_REQUEST: 'quasiTracks/spotify/createPlaylistRequest',\r\n  CREATE_PLAYLIST_SUCCESS: 'quasiTracks/spotify/createPlaylistSuccess',\r\n  CREATE_PLAYLIST_FAILURE: 'quasiTracks/spotify/createPlaylistFailure',\r\n\r\n  ADD_TRACKS_TO_PLAYLIST_REQUEST: 'quasiTracks/spotify/addTracksToPlaylistRequest',\r\n  ADD_TRACKS_TO_PLAYLIST_SUCCESS: 'quasiTracks/spotify/addTracksToPlaylistSuccess',\r\n  ADD_TRACKS_TO_PLAYLIST_FAILURE: 'quasiTracks/spotify/addTracksToPlaylistFailure',\r\n};\r\n\r\nexport const startProcessing = (artistId, parameters) => ({\r\n  type: spotifyActions.START_PROCESSING,\r\n  payload: {\r\n    artistId: artistId,\r\n    parameters: parameters,\r\n  },\r\n});\r\n\r\nexport const finishedProcessing = () => ({\r\n  type: spotifyActions.FINISHED_PROCESSING,\r\n});\r\n\r\nexport const toggleIsActive = (id) => ({\r\n  type: spotifyActions.TOGGLE_IS_ACTIVE,\r\n  payload: {\r\n    id: id,\r\n  },\r\n});\r\n\r\nexport const toggleTrackSelected = (id) => ({\r\n  type: spotifyActions.TOGGLE_TRACK_SELECTED,\r\n  payload: {\r\n    id: id,\r\n  },\r\n});\r\n\r\nexport const globalCheckboxSelected = () => (dispatch, getState) => {\r\n  const state = getState();\r\n  const allRowsAreSelected = areAllTracksSelected(state);\r\n\r\n  dispatch({\r\n    type: spotifyActions.GLOBAL_CHECKBOX_SELECTED,\r\n    payload: {\r\n      shouldSelectAll: !allRowsAreSelected,\r\n    },\r\n  });\r\n};\r\nexport const setReferenceValue = (id, value) => ({\r\n  type: spotifyActions.SET_REFERENCE_VALUE,\r\n  payload: {\r\n    id: id,\r\n    value: value,\r\n  },\r\n});\r\n\r\nexport const selectArtist = (artist) => ({\r\n  type: spotifyActions.SELECT_ARTIST,\r\n  payload: {\r\n    artist: artist,\r\n  },\r\n});\r\n\r\nexport const selectAlbum = (album) => ({\r\n  type: spotifyActions.SELECT_ALBUM,\r\n  payload: {\r\n    album: album,\r\n  },\r\n});\r\n\r\nexport const selectPublicPlaylist = (playlist) => ({\r\n  type: spotifyActions.SELECT_PUBLIC_PLAYLIST,\r\n  payload: {\r\n    playlist: playlist,\r\n  },\r\n});\r\n\r\nexport const selectCurrentUserPlaylist = (playlist) => ({\r\n  type: spotifyActions.SELECT_CURRENT_USER_PLAYLIST,\r\n  payload: {\r\n    playlist: playlist,\r\n  },\r\n});\r\n\r\nexport const resetFeaturesToReferenceSong = (artist) => ({\r\n  type: spotifyActions.RESET_FEATURES_TO_REFERENCE_SONG,\r\n});\r\n\r\nexport const getCurrentUser = () => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USER_REQUEST,\r\n    });\r\n\r\n    const currentUser = await spotifyApi.getMe();\r\n\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USER_SUCCESS,\r\n      payload: {\r\n        currentUser: currentUser,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USER_FAILURE,\r\n      payload: {\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const getCurrentUsersPlaylists = () => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi, currentUser } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USERS_PLAYLISTS_REQUEST,\r\n    });\r\n\r\n    const playlists = await getAllCurrentUsersPlaylists(spotifyApi, [], 0);\r\n\r\n    const playlistsOwnedByCurrentUser = _.filter(playlists, ['owner.id', currentUser.id]);\r\n\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USERS_PLAYLISTS_SUCCESS,\r\n      payload: {\r\n        playlists: playlistsOwnedByCurrentUser,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.GET_CURRENT_USERS_PLAYLISTS_FAILURE,\r\n      payload: {\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const searchForTracks = (query, pagination = { limit: 10, offset: 0 }) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_TRACKS_REQUEST,\r\n    });\r\n\r\n    const { tracks: { items: tracks } } = await spotifyApi.searchTracks(query, pagination);\r\n\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_TRACKS_SUCCESS,\r\n      payload: {\r\n        tracks: tracks,\r\n        query: query,\r\n        pagination: pagination,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_TRACKS_FAILURE,\r\n      payload: {\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const searchForArtists = (query, pagination = { limit: 50, offset: 0 }) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ARTISTS_REQUEST,\r\n    });\r\n\r\n    const { artists: { items: artists } } = await spotifyApi.searchArtists(query, pagination);\r\n\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ARTISTS_SUCCESS,\r\n      payload: {\r\n        artists: artists,\r\n        query: query,\r\n        pagination: pagination,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ARTISTS_FAILURE,\r\n      payload: {\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const searchForAlbums = (query, pagination = { limit: 50, offset: 0 }) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ALBUMS_REQUEST,\r\n    });\r\n\r\n    const { albums: { items: albums } } = await spotifyApi.searchAlbums(query, pagination);\r\n\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ALBUMS_SUCCESS,\r\n      payload: {\r\n        albums: albums,\r\n        query: query,\r\n        pagination: pagination,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_ALBUMS_FAILURE,\r\n      payload: {\r\n        e: e,\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const searchForPublicPlaylists = (query, pagination = { limit: 50, offset: 0 }) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_REQUEST,\r\n    });\r\n\r\n    const { playlists: { items: playlists } } = await spotifyApi.searchPlaylists(query, pagination);\r\n\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_SUCCESS,\r\n      payload: {\r\n        playlists: playlists,\r\n        query: query,\r\n        pagination: pagination,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_FAILURE,\r\n      payload: {\r\n        e: e,\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const startPlayingTrack = (uri) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  const currentState = await spotifyApi.getMyCurrentPlaybackState();\r\n\r\n  if (!currentState) {\r\n    dispatch({\r\n      type: spotifyActions.START_PLAYING_TRACK_FAILURE,\r\n      payload: {\r\n        message: 'No track is currently playing. This feature only works when there is a track currently playing on Spotify.',\r\n      },\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.START_PLAYING_TRACK_REQUEST,\r\n    });\r\n\r\n    const result = await spotifyApi.play({ uris: [uri] });\r\n\r\n    console.log({ result });\r\n\r\n    dispatch({\r\n      type: spotifyActions.START_PLAYING_TRACK_SUCCESS,\r\n      payload: {\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.START_PLAYING_TRACK_FAILURE,\r\n      payload: {\r\n        e: e,\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const createNewPlaylist = (name) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi, currentUser } } = getState();\r\n\r\n  if (!window.confirm(`Are you sure you want to create a new playlist titled: \"${name}\"?`)) { return; }\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.CREATE_PLAYLIST_REQUEST,\r\n    });\r\n\r\n    const createdPlaylist = await spotifyApi.createPlaylist(currentUser.id, { name: name, public: false });\r\n\r\n    dispatch({\r\n      type: spotifyActions.CREATE_PLAYLIST_SUCCESS,\r\n      payload: {\r\n        playlist: createdPlaylist,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.CREATE_PLAYLIST_FAILURE,\r\n      payload: {\r\n        e: e,\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const addTracksToPlaylist = (playlistId, trackUris) => async (dispatch, getState) => {\r\n  const { spotify: { spotifyApi } } = getState();\r\n\r\n  try {\r\n    dispatch({\r\n      type: spotifyActions.ADD_TRACKS_TO_PLAYLIST_REQUEST,\r\n    });\r\n\r\n    await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\r\n\r\n    dispatch({\r\n      type: spotifyActions.ADD_TRACKS_TO_PLAYLIST_SUCCESS,\r\n      payload: {\r\n        playlistId: playlistId,\r\n        trackUris: trackUris,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: spotifyActions.ADD_TRACKS_TO_PLAYLIST_FAILURE,\r\n      payload: {\r\n        e: e,\r\n        statusCode: e.status,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nasync function getAllCurrentUsersPlaylists (spotifyApi, allPlaylists, page) {\r\n  const { items: playlists, next } = await spotifyApi.getUserPlaylists({ limit: CURRENT_USER_PLAYLISTS_PAGE_SIZE, offset: page * CURRENT_USER_PLAYLISTS_PAGE_SIZE });\r\n\r\n  _.each(playlists, (playlist) => allPlaylists.push(playlist));\r\n\r\n  if (next) {\r\n    await getAllCurrentUsersPlaylists(spotifyApi, allPlaylists, page + 1);\r\n  }\r\n\r\n  return allPlaylists;\r\n}\r\n\r\nexport const spotifyActionCreators = {\r\n  toggleIsActive: toggleIsActive,\r\n  toggleTrackSelected: toggleTrackSelected,\r\n  globalCheckboxSelected: globalCheckboxSelected,\r\n  setReferenceValue: setReferenceValue,\r\n  resetFeaturesToReferenceSong: resetFeaturesToReferenceSong,\r\n  startProcessing: startProcessing,\r\n  finishedProcessing: finishedProcessing,\r\n  selectArtist: selectArtist,\r\n  selectAlbum: selectAlbum,\r\n  selectPublicPlaylist: selectPublicPlaylist,\r\n  selectCurrentUserPlaylist: selectCurrentUserPlaylist,\r\n  getCurrentUser: getCurrentUser,\r\n  getCurrentUsersPlaylists: getCurrentUsersPlaylists,\r\n  searchForAlbums: searchForAlbums,\r\n  searchForTracks: searchForTracks,\r\n  searchForArtists: searchForArtists,\r\n  searchForPublicPlaylists: searchForPublicPlaylists,\r\n  startPlayingTrack: startPlayingTrack,\r\n  createNewPlaylist: createNewPlaylist,\r\n  addTracksToPlaylist: addTracksToPlaylist,\r\n};\r\n","import { spotifyActions } from '../spotify/actions';\r\n\r\nconst initState = {\r\n  isLoadingArtists: false,\r\n  isLoadingAlbums: false,\r\n  isLoadingPublicPlaylists: false,\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case spotifyActions.SEARCH_FOR_ARTISTS_REQUEST: {\r\n      return { ...state, isLoadingArtists: true };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_ARTISTS_FAILURE:\r\n    case spotifyActions.SEARCH_FOR_ARTISTS_SUCCESS: {\r\n      return { ...state, isLoadingArtists: false };\r\n    }\r\n\r\n    case spotifyActions.SEARCH_FOR_ALBUMS_REQUEST: {\r\n      return { ...state, isLoadingAlbums: true };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_ALBUMS_FAILURE:\r\n    case spotifyActions.SEARCH_FOR_ALBUMS_SUCCESS: {\r\n      return { ...state, isLoadingAlbums: false };\r\n    }\r\n\r\n    case spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_REQUEST: {\r\n      return { ...state, isLoadingPublicPlaylists: true };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_SUCCESS:\r\n    case spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_FAILURE: {\r\n      return { ...state, isLoadingPublicPlaylists: false };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import _ from 'lodash';\r\n\r\nexport const sOrNoS = (countOrArray) => {\r\n  const numItems = _.isObjectLike(countOrArray) ? _.size(countOrArray) : countOrArray;\r\n  return numItems !== 1 ? 's' : '';\r\n};\r\n","import _ from 'lodash';\r\nimport PQueue from 'p-queue';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\nimport { authActions } from '../auth/actions';\r\nimport { spotifyActions } from './actions';\r\nimport React from 'react';\r\nimport { sOrNoS } from '../../common';\r\nimport toastr from 'toastr';\r\n\r\nconst parameterDefaults = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 0.1,\r\n};\r\n\r\nconst AudioFeatureDescriptions = {\r\n  Acousticness: 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.',\r\n  Danceability: 'Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.',\r\n  Energy: 'Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.',\r\n  Instrumentalness: 'Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.',\r\n  Liveness: 'Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.',\r\n  Speechiness: 'Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.',\r\n  Valence: 'A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).',\r\n};\r\n\r\nconst clearSearchState = {\r\n  searchedArtists: [],\r\n  searchedAlbums: [],\r\n  selectedTracks: {},\r\n  tracks: [],\r\n  audioFeatures: {},\r\n};\r\n\r\nconst initState = {\r\n  spotifyApi: new SpotifyWebApi(),\r\n  queue: new PQueue({ concurrency: 5, intervalCap: 10, interval: 800 }),\r\n  isProcessing: false,\r\n  searchedText: null,\r\n  selectedPlaylist: null,\r\n  currentUserPlaylists: [],\r\n  searchedArtists: [],\r\n  searchedAlbums: [],\r\n  searchedPlaylists: [],\r\n  tracks: [],\r\n  selectedTracks: {},\r\n  audioFeatures: {},\r\n  parameters: {\r\n    acousticness: { ...parameterDefaults, description: AudioFeatureDescriptions.Acousticness, property: 'acousticness', label: 'Acousticness', value: 0.5, active: true },\r\n    danceability: { ...parameterDefaults, description: AudioFeatureDescriptions.Danceability, property: 'danceability', label: 'Danceability', value: 0.5, active: true },\r\n    energy: { ...parameterDefaults, description: AudioFeatureDescriptions.Energy, property: 'energy', label: 'Energy', value: 0.5, active: true },\r\n    instrumentalness: { ...parameterDefaults, description: AudioFeatureDescriptions.Instrumentalness, property: 'instrumentalness', label: 'Instrumentalness', value: 0.5, active: true },\r\n    liveness: { ...parameterDefaults, description: AudioFeatureDescriptions.Liveness, property: 'liveness', label: 'Liveness', value: 0.5, active: true },\r\n    speechiness: { ...parameterDefaults, description: AudioFeatureDescriptions.Speechiness, property: 'speechiness', label: 'Speechiness', value: 0.5, active: true },\r\n    valence: { ...parameterDefaults, description: AudioFeatureDescriptions.Valence, property: 'valence', label: 'Valence', value: 0.5, active: true },\r\n  },\r\n  parametersAreDirty: false,\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case authActions.SET_ACCESS_TOKEN: {\r\n      const { accessToken } = action.payload;\r\n\r\n      state.spotifyApi.setAccessToken(accessToken);\r\n\r\n      return state;\r\n    }\r\n    case spotifyActions.GET_CURRENT_USER_SUCCESS: {\r\n      const { currentUser } = action.payload;\r\n\r\n      return { ...state, currentUser: currentUser };\r\n    }\r\n    case spotifyActions.TOGGLE_TRACK_SELECTED: {\r\n      const { id } = action.payload;\r\n\r\n      const selectedTracks = { ...state.selectedTracks };\r\n\r\n      if (_.has(selectedTracks, id)) {\r\n        delete selectedTracks[id];\r\n      } else {\r\n        selectedTracks[id] = id;\r\n      }\r\n\r\n      return { ...state, selectedTracks: selectedTracks };\r\n    }\r\n    case spotifyActions.GLOBAL_CHECKBOX_SELECTED: {\r\n      const { shouldSelectAll } = action.payload;\r\n\r\n      const selectedTracks = {};\r\n\r\n      if (shouldSelectAll) {\r\n        _.each(state.tracks, ({ id }) => {\r\n          selectedTracks[id] = id;\r\n        });\r\n      }\r\n\r\n      return { ...state, selectedTracks: selectedTracks };\r\n    }\r\n    case spotifyActions.SELECT_CURRENT_USER_PLAYLIST: {\r\n      const { playlist } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        selectedPlaylist: playlist,\r\n      };\r\n    }\r\n    case spotifyActions.CREATE_PLAYLIST_SUCCESS: {\r\n      const { playlist } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentUserPlaylists: state.currentUserPlaylists.concat(transformPlaylist(playlist)),\r\n        selectedPlaylist: transformPlaylist(playlist),\r\n      };\r\n    }\r\n    case spotifyActions.GET_CURRENT_USERS_PLAYLISTS_SUCCESS: {\r\n      const { playlists } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        currentUserPlaylists: _.map(_.sortBy(playlists, ({ name }) => _.toLower(name)), transformPlaylist),\r\n      };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_ARTISTS_SUCCESS: {\r\n      const { artists } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        searchedArtists: _.map(artists, ({ followers, id, images, name, popularity }) => ({ followers, id, images, name, popularity })),\r\n      };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_ALBUMS_SUCCESS: {\r\n      const { albums } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        searchedAlbums: _.map(albums, ({ id, artists, href, name, release_date: releaseDate, total_tracks: totalTracks }) => {\r\n          return {\r\n            id: id,\r\n            artist: _.size(artists) > 0 ? artists[0] : null,\r\n            href: href,\r\n            name: name,\r\n            releaseDate: releaseDate,\r\n            totalTracks: totalTracks,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case spotifyActions.SEARCH_FOR_PUBLIC_PLAYLISTS_SUCCESS: {\r\n      const { playlists } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        searchedPlaylists: _.map(playlists, ({ id, uri, href, name, owner, tracks }) => {\r\n          return {\r\n            id: id,\r\n            uri: uri,\r\n            owner: owner,\r\n            href: href,\r\n            name: name,\r\n            totalTracks: tracks ? tracks.total : null,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case spotifyActions.SELECT_ARTIST: {\r\n      const { artist } = action.payload;\r\n      return {\r\n        ...state,\r\n        ...clearSearchState,\r\n        searchedText: <span>Selected Artist: <strong>{artist.name}</strong></span>,\r\n      };\r\n    }\r\n    case spotifyActions.SELECT_ALBUM: {\r\n      const { album } = action.payload;\r\n      return {\r\n        ...state,\r\n        ...clearSearchState,\r\n        searchedText: <span>Selected Album: <strong>{album.name}</strong></span>,\r\n      };\r\n    }\r\n    case spotifyActions.SELECT_PUBLIC_PLAYLIST: {\r\n      const { playlist } = action.payload;\r\n      return {\r\n        ...state,\r\n        ...clearSearchState,\r\n        searchedText: <span>Selected Playlist: <strong>{playlist.name}</strong></span>,\r\n      };\r\n    }\r\n    case spotifyActions.SELECT_TRACKS: {\r\n      const { tracks } = action.payload;\r\n\r\n      const dtos = _.map(tracks, ({ id, uri, name, artists, album, track_number: trackNumber }) => {\r\n        return {\r\n          id: id,\r\n          name: name,\r\n          uri: uri,\r\n          artist: _.size(artists) > 0 ? artists[0].name : null,\r\n          album: album ? album.name : null,\r\n          trackNumber: trackNumber,\r\n        };\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        tracks: state.tracks.concat(dtos),\r\n      };\r\n    }\r\n    case spotifyActions.LOADED_TRACK_AUDIO_FEATURES: {\r\n      const { audioFeatures } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        audioFeatures: {\r\n          ...state.audioFeatures,\r\n          ..._.keyBy(audioFeatures, 'id'),\r\n        },\r\n      };\r\n    }\r\n    case spotifyActions.TOGGLE_IS_ACTIVE: {\r\n      const { id } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        parameters: {\r\n          ...state.parameters,\r\n          [id]: {\r\n            ...state.parameters[id],\r\n            active: !state.parameters[id].active,\r\n          },\r\n        },\r\n        parametersAreDirty: true,\r\n      };\r\n    }\r\n    case spotifyActions.SET_REFERENCE_VALUE: {\r\n      const { id, value } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        parameters: {\r\n          ...state.parameters,\r\n          [id]: {\r\n            ...state.parameters[id],\r\n            value: value,\r\n          },\r\n        },\r\n        parametersAreDirty: true,\r\n      };\r\n    }\r\n    case spotifyActions.START_PROCESSING: {\r\n      return { ...state, isProcessing: true };\r\n    }\r\n    case spotifyActions.FINISHED_PROCESSING: {\r\n      return { ...state, isProcessing: false };\r\n    }\r\n    case spotifyActions.ADD_TRACKS_TO_PLAYLIST_SUCCESS: {\r\n      const { playlistId, trackUris } = action.payload;\r\n\r\n      const selectedPlaylist = _.find(state.currentUserPlaylists, { id: playlistId });\r\n\r\n      toastr.success(`Successfully added ${_.size(trackUris)} track${sOrNoS(trackUris)} to ${selectedPlaylist ? `'${selectedPlaylist.name}'` : 'the selected playlist'}.`);\r\n\r\n      return state;\r\n    }\r\n    default: {\r\n      if (state.accessToken) {\r\n        state.spotifyApi.setAccessToken(state.accessToken);\r\n      }\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nfunction transformPlaylist (playlist) {\r\n  return {\r\n    ...playlist,\r\n    label: playlist.name,\r\n    value: playlist.id,\r\n  };\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport authReducer from './auth/reducer';\r\nimport loadingReducer from './loading/reducer';\r\nimport spotifyReducer from './spotify/reducer';\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  loading: loadingReducer,\r\n  spotify: spotifyReducer,\r\n});\r\n","import _ from 'lodash';\nimport { spotifyActions } from '../spotify/actions';\n\nconst ARTIST_ALBUMS_PAGE_SIZE = 50;\nconst ALBUM_TRACKS_PAGE_SIZE = 50;\n\nconst redirect = ({ dispatch, getState }) => next => async action => {\n  next(action);\n\n  switch (action.type) {\n    case spotifyActions.SELECT_ARTIST: {\n      const { artist } = action.payload;\n\n      dispatch({\n        type: spotifyActions.LOAD_ARTIST_ALBUMS,\n        payload: {\n          artist: artist,\n          page: 0,\n        },\n      });\n\n      return;\n    }\n    case spotifyActions.LOAD_ARTIST_ALBUMS: {\n      const { artist, page } = action.payload;\n      const { spotify } = getState();\n      const { queue } = spotify;\n\n      queue.add(() => {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async resolve => {\n          try {\n            const result = await spotify.spotifyApi.getArtistAlbums(artist.id, { include_groups: 'album', limit: ARTIST_ALBUMS_PAGE_SIZE, offset: page * ARTIST_ALBUMS_PAGE_SIZE });\n            const { items: albums, next } = result;\n\n            if (next) {\n              dispatch({\n                type: spotifyActions.LOAD_ARTIST_ALBUMS,\n                payload: {\n                  artist: artist,\n                  page: page + 1,\n                },\n              });\n            }\n\n            _.each(albums, (album) => {\n              dispatch({\n                type: spotifyActions.LOAD_ALBUM,\n                payload: {\n                  album: album,\n                },\n              });\n            });\n\n            return resolve(result);\n          } catch (e) {\n            dispatch({\n              type: spotifyActions.UNAUTHORIZED,\n            });\n          }\n        });\n      });\n\n      return;\n    }\n    case spotifyActions.SELECT_ALBUM:\n    case spotifyActions.LOAD_ALBUM: {\n      const { album } = action.payload;\n\n      dispatch({\n        type: spotifyActions.LOAD_ALBUM_TRACKS,\n        payload: {\n          album: album,\n          page: 0,\n        },\n      });\n\n      return;\n    }\n    case spotifyActions.LOAD_ALBUM_TRACKS: {\n      const { album, page } = action.payload;\n      const { spotify } = getState();\n      const { queue } = spotify;\n\n      queue.add(() => {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async resolve => {\n          try {\n            const result = await spotify.spotifyApi.getAlbumTracks(album.id, { limit: ALBUM_TRACKS_PAGE_SIZE, offset: page * ALBUM_TRACKS_PAGE_SIZE });\n            const { items, next } = result;\n\n            const tracks = _.map(items, (track) => ({ ...track, album }));\n\n            if (next) {\n              dispatch({\n                type: spotifyActions.LOAD_ALBUM_TRACKS,\n                payload: {\n                  album: album,\n                  page: page + 1,\n                },\n              });\n            }\n\n            dispatch({\n              type: spotifyActions.SELECT_TRACKS,\n              payload: {\n                tracks: tracks,\n              },\n            });\n\n            return resolve(result);\n          } catch (e) {\n            dispatch({\n              type: spotifyActions.UNAUTHORIZED,\n            });\n          }\n        });\n      });\n\n      return;\n    }\n    case spotifyActions.SELECT_TRACKS: {\n      const { tracks } = action.payload;\n      const { spotify } = getState();\n      const { queue } = spotify;\n\n      queue.add(() => {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async resolve => {\n          try {\n            const { audio_features: audioFeatures } = await spotify.spotifyApi.getAudioFeaturesForTracks(_.map(tracks, 'id'));\n\n            dispatch({\n              type: spotifyActions.LOADED_TRACK_AUDIO_FEATURES,\n              payload: {\n                audioFeatures: audioFeatures,\n              },\n            });\n\n            return resolve(audioFeatures);\n          } catch (e) {\n            dispatch({\n              type: spotifyActions.UNAUTHORIZED,\n            });\n          }\n        });\n      });\n\n      return;\n    }\n    case spotifyActions.SELECT_PUBLIC_PLAYLIST: {\n      const { playlist } = action.payload;\n\n      dispatch({\n        type: spotifyActions.LOAD_PLAYLIST_TRACKS,\n        payload: {\n          playlist: playlist,\n          page: 0,\n        },\n      });\n\n      return;\n    }\n    case spotifyActions.LOAD_PLAYLIST_TRACKS: {\n      const { playlist, page } = action.payload;\n      const { spotify } = getState();\n      const { queue } = spotify;\n\n      queue.add(() => {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await spotify.spotifyApi.getPlaylistTracks(playlist.id, { limit: ALBUM_TRACKS_PAGE_SIZE, offset: page * ALBUM_TRACKS_PAGE_SIZE });\n            const { items, next } = result;\n\n            const tracks = _.map(items, (item) => ({ ...item.track, playlist }));\n\n            if (next) {\n              dispatch({\n                type: spotifyActions.LOAD_PLAYLIST_TRACKS,\n                payload: {\n                  playlist: playlist,\n                  page: page + 1,\n                },\n              });\n            }\n\n            dispatch({\n              type: spotifyActions.SELECT_TRACKS,\n              payload: {\n                tracks: tracks,\n              },\n            });\n\n            return resolve(result);\n          } catch (e) {\n            dispatch({\n              type: spotifyActions.UNAUTHORIZED,\n            });\n          }\n        });\n      });\n\n      break;\n    }\n    default: {\n      // eslint-disable-next-line no-useless-return\n      return;\n    }\n  }\n};\n\nexport default redirect;\n","import _ from 'lodash';\nimport { spotifyActions } from '../spotify/actions';\n\nconst debouncedDoneProcessing = _.debounce(doneProcessing, 2500);\n\nlet isProcessing = false;\n\nconst isProcessingMiddleware = ({ dispatch }) => next => async action => {\n  switch (action.type) {\n    case spotifyActions.SELECT_ARTIST:\n    case spotifyActions.LOAD_ARTIST_ALBUMS:\n    case spotifyActions.LOAD_ALBUM:\n    case spotifyActions.LOAD_ALBUM_TRACKS:\n    case spotifyActions.LOADED_TRACK_AUDIO_FEATURES:\n    case spotifyActions.SELECT_TRACKS: {\n      if (!isProcessing) {\n        isProcessing = true;\n        dispatch({\n          type: spotifyActions.START_PROCESSING,\n        });\n      }\n\n      debouncedDoneProcessing(dispatch);\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  next(action);\n};\n\nfunction doneProcessing (dispatch) {\n  isProcessing = false;\n  dispatch({\n    type: spotifyActions.FINISHED_PROCESSING,\n  });\n}\n\nexport default isProcessingMiddleware;\n","import _ from 'lodash';\nimport { spotifyActions } from '../spotify/actions';\n\nconst unauthorizedMiddleware = () => next => action => {\n  if (action.type === spotifyActions.UNAUTHORIZED || _.get(action.payload, 'statusCode') === 401) {\n    window.location.href = window.location.origin;\n    return;\n  }\n\n  return next(action);\n};\n\nexport default unauthorizedMiddleware;\n","import _ from 'lodash';\nimport toastr from 'toastr';\n\nconst toastrMiddleware = () => next => async action => {\n  next(action);\n\n  if (_.endsWith(action.type, 'Failure') && action.payload.message) {\n    toastr.clear();\n    toastr.error(action.payload.message, undefined, {\n      timeOut: 30 * 1000,\n      extendedTimeOut: 60 * 1000,\n    });\n  }\n};\n\nexport default toastrMiddleware;\n","import { applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport spotifyDataTriggerMiddleware from './middleware/spotifyDataTriggerMiddleware';\r\nimport isProcessingMiddleware from './middleware/isProcessingMiddleware';\r\nimport unauthorizedMiddleware from './middleware/unauthorizedMiddleware';\r\nimport toastrMiddleware from './middleware/toastrMiddleware';\r\n\r\nexport default applyMiddleware(unauthorizedMiddleware, isProcessingMiddleware, spotifyDataTriggerMiddleware, thunk, toastrMiddleware);\r\n","import _ from 'lodash';\r\n\r\nexport const isProduction = !_.includes(window.location.host, 'localhost');\r\n\r\nexport default {\r\n  SpotifyClientId: '99f43a6aef114c17bf91c49dfb8469e5',\r\n  CallbackUri: isProduction ? 'https://quacks.xyz' : 'http://localhost:3000',\r\n  Scopes: ['user-read-playback-state', 'playlist-modify-private', 'user-modify-playback-state', 'playlist-read-private'].join(' '),\r\n};\r\n","import React from 'react';\r\nimport Config from '../config';\r\nimport { Col, Container, Row } from 'reactstrap';\r\n\r\nclass LoginContainer extends React.PureComponent {\r\n  render () {\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col xl='12'>\r\n            <div className='login-container'>\r\n              <button className='btn btn-primary btn-lg' onClick={this.redirectToLogin}>Log in to Spotify</button>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  redirectToLogin = () => {\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${Config.SpotifyClientId}&redirect_uri=${encodeURI(Config.CallbackUri)}&response_type=token&scope=${Config.Scopes}`;\r\n  };\r\n}\r\n\r\nLoginContainer.propTypes = {\r\n\r\n};\r\n\r\nexport default LoginContainer;\r\n","import React from 'react';\r\nimport { Col, Container, Row } from 'reactstrap';\r\n\r\nconst LoadingUserContainer = () => (\r\n  <Container fluid>\r\n    <Row>\r\n      <Col xl='12'>\r\n        <h1 className='text-center'><i className='fa fa-spin fa-refresh' /> Loading Current User</h1>\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nLoadingUserContainer.propTypes = {\r\n\r\n};\r\n\r\nexport default LoadingUserContainer;\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from 'rc-slider';\r\nimport Toggle from 'react-toggle';\r\nimport { PopoverBody, PopoverHeader, UncontrolledPopover } from 'reactstrap';\r\n\r\nclass FeatureSlider extends React.PureComponent {\r\n  render () {\r\n    const { id, value, label, step, min, max, setReferenceValue, active, toggleIsActive, description, ...rest } = this.props;\r\n\r\n    return (\r\n      <div className='row' onDoubleClick={this.toggleIsActive} {...rest}>\r\n        <div className='col-md-12'>\r\n          <div className='float-left'>\r\n            <label className={classnames({ 'inactive-feature-slider-label': !active })}>{label} <i id={`feature-tooltip-${id}`} className='fa fa-info-circle' /></label>\r\n            <UncontrolledPopover placement='right' target={`feature-tooltip-${id}`} trigger='legacy'>\r\n              <PopoverHeader>{label}</PopoverHeader>\r\n              <PopoverBody>{description}</PopoverBody>\r\n            </UncontrolledPopover>\r\n          </div>\r\n          <div className='float-right'>\r\n            <Toggle\r\n              checked={active}\r\n              name='burritoIsReady'\r\n              value='yes'\r\n              onChange={this.toggleIsActive}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='col-md-12'>\r\n          <Slider\r\n            value={value}\r\n            disabled={!active}\r\n            onChange={this.setReferenceValue}\r\n            step={step}\r\n            max={max}\r\n            min={min}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleIsActive = () => {\r\n    const { id } = this.props;\r\n    this.props.toggleIsActive(id);\r\n  };\r\n\r\n  setReferenceValue = (value) => {\r\n    const { id } = this.props;\r\n    this.props.setReferenceValue(id, value);\r\n  }\r\n}\r\n\r\nFeatureSlider.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  active: PropTypes.bool.isRequired,\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  step: PropTypes.number.isRequired,\r\n  toggleIsActive: PropTypes.func.isRequired,\r\n  setReferenceValue: PropTypes.func.isRequired,\r\n\r\n};\r\n\r\nexport default FeatureSlider;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport FeatureSlider from './FeatureSlider';\r\nimport { spotifyActionCreators } from '../modules/spotify/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst FeatureSidebar = ({ parameters, toggleIsActive, setReferenceValue }) => {\r\n  return (\r\n    <div className='features' style={{ flex: 1, flexGrow: 1, overflowX: 'hidden', overflowY: 'auto', paddingLeft: 30, paddingRight: 30 }}>\r\n      {\r\n        _.map(parameters, (analysis, id) => {\r\n          return (\r\n            <div key={id} className='feature-slider'>\r\n              <FeatureSlider\r\n                id={id}\r\n                {...analysis}\r\n                style={{ marginBottom: 7 }}\r\n                toggleIsActive={toggleIsActive}\r\n                setReferenceValue={setReferenceValue}\r\n              />\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ spotify }) => {\r\n  return {\r\n    parameters: spotify.parameters,\r\n    parametersAreDirty: spotify.parametersAreDirty,\r\n    selectedTrack: spotify.selectedTrack,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  resetFeaturesToReferenceSong: spotifyActionCreators.resetFeaturesToReferenceSong,\r\n  setReferenceValue: spotifyActionCreators.setReferenceValue,\r\n  toggleIsActive: spotifyActionCreators.toggleIsActive,\r\n};\r\n\r\nFeatureSidebar.propTypes = {\r\n  parameters: PropTypes.object.isRequired,\r\n  toggleIsActive: PropTypes.func.isRequired,\r\n  setReferenceValue: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeatureSidebar);\r\n","import _ from 'lodash';\r\n\r\nconst QueryType = {\r\n  Artist: 1,\r\n  Album: 2,\r\n  PublicPlaylist: 3,\r\n};\r\n\r\nexport const QueryTypes = [\r\n  { label: 'Artists', value: QueryType.Artist },\r\n  { label: 'Albums', value: QueryType.Album },\r\n  { label: 'Public Playlists', value: QueryType.PublicPlaylist }\r\n];\r\n\r\nexport const KeyedQueryTypes = _.keyBy(QueryTypes, 'value');\r\n\r\nexport default QueryType;\r\n","import React, { useState } from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { DropdownItem, DropdownMenu, DropdownToggle, Input, InputGroup, InputGroupButtonDropdown } from 'reactstrap';\r\nimport { KeyedQueryTypes, QueryTypes } from '../../Enums/QueryType';\r\n\r\nconst SearchInput = ({ query, setQuery, queryType, setQueryType }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const { label } = KeyedQueryTypes[queryType];\r\n\r\n  return (\r\n    <InputGroup size='lg'>\r\n      <Input id='txt-artist-search' bsSize='lg' placeholder={`Search for ${label}...`} value={query} onChange={(e) => setQuery(e.target.value)} />\r\n      <InputGroupButtonDropdown addonType='append' isOpen={isDropdownOpen} toggle={() => setIsDropdownOpen(!isDropdownOpen)}>\r\n        <DropdownToggle caret>\r\n          {label}\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n          {\r\n            _.map(QueryTypes, ({ label, value }) => {\r\n              return (\r\n                <DropdownItem key={value} onClick={() => setQueryType(value)}>{label}</DropdownItem>\r\n              );\r\n            })\r\n          }\r\n        </DropdownMenu>\r\n      </InputGroupButtonDropdown>\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nSearchInput.propTypes = {\r\n  query: PropTypes.string.isRequired,\r\n  queryType: PropTypes.number.isRequired,\r\n  setQuery: PropTypes.func.isRequired,\r\n  setQueryType: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchInput;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SearchInput from './SearchInput';\r\nimport QueryType, { KeyedQueryTypes } from '../../Enums/QueryType';\r\n\r\nconst SearchForm = ({ searchedText, submitArtistSearch }) => {\r\n  const [query, setQuery] = useState('');\r\n  const [queryType, setQueryType] = useState(QueryType.Artist);\r\n\r\n  const { label } = KeyedQueryTypes[queryType];\r\n\r\n  return (\r\n    <Form onSubmit={(e) => submitArtistSearch(e, query, queryType)}>\r\n      <SearchInput\r\n        query={query}\r\n        queryType={queryType}\r\n        setQuery={setQuery}\r\n        setQueryType={setQueryType}\r\n      />\r\n\r\n      <div style={{ display: 'flex', alignItems: 'center', marginTop: 7 }}>\r\n        <div className='float-left' style={{ flex: 1 }}>\r\n          {searchedText && <span style={{ margin: 0 }}>{searchedText}</span>}\r\n        </div>\r\n\r\n        <div className='float-right'>\r\n          <Button color='secondary' type='submit'>Search for {label}...</Button>\r\n        </div>\r\n\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nSearchForm.propTypes = {\r\n  searchedText: PropTypes.string,\r\n  submitArtistSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ spotify }) => {\r\n  return {\r\n    searchedText: spotify.searchedText,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SearchForm);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableLoader = props => {\n  const { loading, loadingText } = props;\n\n  if (!loading) {\n    return null;\n  }\n\n  return (\n    <div className='-loading -active'>\n      <div className='-loading-inner'>\n        <h2><i className='fa fa-spin fa-cog' /> {loadingText}</h2>\n      </div>\n    </div>\n  );\n};\n\nTableLoader.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string,\n};\n\nexport default TableLoader;\n","import React from 'react';\nimport ReactTableBase from 'react-table';\nimport PropTypes from 'prop-types';\nimport TableLoader from './TableLoader';\n\nconst ReactTable = ({ onRef, ...rest }) => {\n  const options = {\n    className: '-striped -hover',\n    minRows: 0,\n    showPageJump: false,\n    showPageSizeOptions: false,\n    LoadingComponent: TableLoader,\n    pageSize: 10,\n    ...rest,\n  };\n\n  return (\n    <ReactTableBase ref={onRef} {...options} />\n  );\n};\n\nReactTable.propTypes = {\n  onRef: PropTypes.func,\n};\n\nexport default ReactTable;\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from '../Base/ReactTable';\r\nimport { connect } from 'react-redux';\r\nimport Checkbox from 'react-three-state-checkbox';\r\n\r\nclass TrackAnalysisResultsTable extends React.PureComponent {\r\n  render () {\r\n    const { tracks, selectedTracks, isLoading, allTracksAreSelected } = this.props;\r\n\r\n    const options = {\r\n      className: '-striped -hover',\r\n      data: tracks,\r\n      loading: isLoading,\r\n      columns: [\r\n        {\r\n          Header: () => (\r\n            <Checkbox\r\n              checked={allTracksAreSelected}\r\n              indeterminate={!allTracksAreSelected && _.size(selectedTracks) > 0}\r\n              onChange={this.props.globalCheckboxSelected}\r\n            />\r\n          ),\r\n          id: 'checked',\r\n          Cell: this.renderCheckbox,\r\n          width: 30,\r\n          className: 'text-center',\r\n          filterable: false,\r\n          sortable: false,\r\n          resizable: false,\r\n        },\r\n        { Header: '', id: 'play', Cell: this.renderPlayButton, width: 35, className: 'text-center', filterable: false },\r\n        { Header: 'Score', accessor: 'score', width: 75 },\r\n        { Header: 'Name', accessor: 'name' },\r\n        { Header: 'Album', accessor: 'album', width: 360 },\r\n        { Header: 'Track #', accessor: 'trackNumber', width: 75 }\r\n      ],\r\n      getTrProps: (state, { original }) => {\r\n        const { id } = original;\r\n\r\n        const isSelected = _.has(selectedTracks, id);\r\n\r\n        return {\r\n          onClick: () => {\r\n            this.props.setIsSelected(id, isSelected);\r\n          },\r\n        };\r\n      },\r\n      defaultSorted: [{ id: 'score' }],\r\n    };\r\n    return (\r\n      <div className='bg-white'>\r\n        <ReactTable tableId='track-analysis' {...options} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderCheckbox = ({ original }) => {\r\n    const { selectedTracks } = this.props;\r\n    const { id } = original;\r\n\r\n    const isSelected = _.has(selectedTracks, id);\r\n\r\n    return (\r\n      <input type='checkbox' checked={isSelected} readOnly />\r\n    );\r\n  };\r\n\r\n  renderPlayButton = ({ original }) => {\r\n    const { uri } = original;\r\n\r\n    return (\r\n      <button\r\n        className='btn btn-link' onClick={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          this.props.startPlayingTrack(uri);\r\n        }}\r\n      ><i className='fa fa-play' />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nTrackAnalysisResultsTable.propTypes = {\r\n  tracks: PropTypes.array.isRequired,\r\n  selectedTracks: PropTypes.object.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  allTracksAreSelected: PropTypes.bool.isRequired,\r\n  setIsSelected: PropTypes.func.isRequired,\r\n  globalCheckboxSelected: PropTypes.func.isRequired,\r\n  startPlayingTrack: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { spotify } = state;\r\n  return {\r\n    audioFeatures: spotify.audioFeatures,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackAnalysisResultsTable);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { sOrNoS } from '../../common';\r\nimport ReactTable from '../Base/ReactTable';\r\nimport { withSizes } from 'react-sizes';\r\n\r\nconst ArtistsResultsTable = ({ artists, isLoading, isMobile, onSelect }) => {\r\n  const options = {\r\n    className: '-striped -hover',\r\n    data: artists,\r\n    loading: isLoading,\r\n    columns: [\r\n      {\r\n        Header: '',\r\n        id: 'select',\r\n        width: 115,\r\n        // eslint-disable-next-line react/prop-types\r\n        Cell: ({ original }) => {\r\n          return (\r\n            <button className='btn btn-sm btn-primary' onClick={() => onSelect(original)}>\r\n              Select Artist\r\n            </button>\r\n          );\r\n        },\r\n      },\r\n      { Header: 'Name', accessor: 'name' },\r\n      { Header: 'Popularity', accessor: 'popularity', show: !isMobile },\r\n      { Header: 'Followers', id: 'followers', accessor: ({ followers }) => followers ? followers.total : null, show: !isMobile }\r\n    ],\r\n  };\r\n  return (\r\n    <div style={{ padding: 10 }}>\r\n      <div className='clearfix'>\r\n        <div className='float-left'>\r\n          <label>Loaded {_.size(artists)} Artist{sOrNoS(artists)}</label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='bg-white'>\r\n        <ReactTable tableId='artist-results' {...options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nArtistsResultsTable.propTypes = {\r\n  artists: PropTypes.array.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  isMobile: PropTypes.bool.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapSizesToProps = ({ width }) => ({\r\n  isMobile: width < 992,\r\n});\r\n\r\nexport default withSizes(mapSizesToProps)(ArtistsResultsTable);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport Col from 'reactstrap/es/Col';\r\nimport { connect } from 'react-redux';\r\nimport ArtistsResultsTable from '../Tables/ArtistsResultsTable';\r\n\r\nconst SelectArtistModal = props => {\r\n  const { show, artists } = props;\r\n\r\n  return (\r\n    <Modal isOpen={show} toggle={props.hide} className={props.className} size='lg'>\r\n      <ModalHeader toggle={props.hide}>Search for an Artist</ModalHeader>\r\n      <ModalBody>\r\n        <Row style={{\r\n          marginTop: 7,\r\n          overflowX: 'auto',\r\n        }}\r\n        >\r\n          <Col md='12'>\r\n            <ArtistsResultsTable artists={artists} onSelect={props.selectArtist} />\r\n          </Col>\r\n        </Row>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nSelectArtistModal.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  artists: PropTypes.array.isRequired,\r\n  className: PropTypes.string,\r\n  selectArtist: PropTypes.func.isRequired,\r\n  hide: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ spotify }) => {\r\n  return {\r\n    artists: spotify.searchedArtists,\r\n  };\r\n};\r\n\r\nexport default React.memo(connect(mapStateToProps)(SelectArtistModal));\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { sOrNoS } from '../../common';\r\nimport ReactTable from '../Base/ReactTable';\r\n\r\nconst AlbumSearchResultsTable = ({ albums, isLoading, onSelect }) => {\r\n  const options = {\r\n    className: '-striped -hover',\r\n    data: albums,\r\n    loading: isLoading,\r\n    columns: [\r\n      {\r\n        Header: '',\r\n        id: 'select',\r\n        width: 115,\r\n        // eslint-disable-next-line react/prop-types\r\n        Cell: ({ original }) => {\r\n          return (\r\n            <button className='btn btn-sm btn-primary' onClick={() => onSelect(original)}>\r\n              Select Album\r\n            </button>\r\n          );\r\n        },\r\n      },\r\n      { Header: 'Album', accessor: 'name' },\r\n      { Header: 'Artist', id: 'artist', accessor: ({ artist }) => artist ? artist.name : null },\r\n      { Header: 'Release Date', accessor: 'releaseDate' },\r\n      { Header: '# Tracks', accessor: 'totalTracks' }\r\n    ],\r\n  };\r\n  return (\r\n    <div style={{ padding: 10 }}>\r\n      <div className='clearfix'>\r\n        <div className='float-left'>\r\n          <label>Loaded {_.size(albums)} Album{sOrNoS(albums)}</label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='bg-white'>\r\n        <ReactTable tableId='album-search-results' {...options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAlbumSearchResultsTable.propTypes = {\r\n  albums: PropTypes.array.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AlbumSearchResultsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport Col from 'reactstrap/es/Col';\r\nimport { connect } from 'react-redux';\r\nimport AlbumSearchResultsTable from '../Tables/AlbumSearchResultsTable';\r\n\r\nconst SelectAlbumModal = props => {\r\n  const { show, searchedAlbums, isLoadingAlbums } = props;\r\n\r\n  return (\r\n    <Modal isOpen={show} toggle={props.hide} className={props.className} size='lg'>\r\n      <ModalHeader toggle={props.hide}>Search for an Album</ModalHeader>\r\n      <ModalBody>\r\n        <Row style={{\r\n          marginTop: 7,\r\n          overflowX: 'auto',\r\n        }}\r\n        >\r\n          <Col md='12'>\r\n            <AlbumSearchResultsTable albums={searchedAlbums} isLoading={isLoadingAlbums} onSelect={props.selectAlbum} />\r\n          </Col>\r\n        </Row>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nSelectAlbumModal.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  searchedAlbums: PropTypes.array.isRequired,\r\n  isLoadingAlbums: PropTypes.bool.isRequired,\r\n  className: PropTypes.string,\r\n  selectAlbum: PropTypes.func.isRequired,\r\n  hide: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ spotify, loading }) => {\r\n  return {\r\n    searchedAlbums: spotify.searchedAlbums,\r\n    isLoadingAlbums: loading.isLoadingAlbums,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SelectAlbumModal);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { sOrNoS } from '../../common';\r\nimport ReactTable from '../Base/ReactTable';\r\n\r\nconst PublicPlaylistSearchResultsTable = ({ playlists, isLoading, onSelect }) => {\r\n  const options = {\r\n    className: '-striped -hover',\r\n    data: playlists,\r\n    loading: isLoading,\r\n    columns: [\r\n      {\r\n        Header: '',\r\n        id: 'select',\r\n        width: 125,\r\n        // eslint-disable-next-line react/prop-types\r\n        Cell: ({ original }) => {\r\n          return (\r\n            <button className='btn btn-sm btn-primary' onClick={() => onSelect(original)}>\r\n              Select Playlist\r\n            </button>\r\n          );\r\n        },\r\n      },\r\n      { Header: 'Playlist Name', accessor: 'name' },\r\n      { Header: 'Owner', id: 'owner', accessor: ({ owner }) => owner ? owner.display_name : null },\r\n      { Header: '# Tracks', accessor: 'totalTracks' }\r\n    ],\r\n  };\r\n  return (\r\n    <div style={{ padding: 10 }}>\r\n      <div className='clearfix'>\r\n        <div className='float-left'>\r\n          <label>Loaded {_.size(playlists)} Playlist{sOrNoS(playlists)}</label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='bg-white'>\r\n        <ReactTable tableId='public-playlist-search' {...options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPublicPlaylistSearchResultsTable.propTypes = {\r\n  playlists: PropTypes.array.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PublicPlaylistSearchResultsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport Col from 'reactstrap/es/Col';\r\nimport { connect } from 'react-redux';\r\nimport PublicPlaylistSearchResultsTable from '../Tables/PublicPlaylistSearchResultsTable';\r\n\r\nconst SelectPublicPlaylistModal = props => {\r\n  const { show, searchedPlaylists, isLoadingPublicPlaylists } = props;\r\n\r\n  return (\r\n    <Modal isOpen={show} toggle={props.hide} className={props.className} size='lg'>\r\n      <ModalHeader toggle={props.hide}>Search for a Public Playlist</ModalHeader>\r\n      <ModalBody>\r\n        <Row style={{\r\n          marginTop: 7,\r\n          overflowX: 'auto',\r\n        }}\r\n        >\r\n          <Col md='12'>\r\n            <PublicPlaylistSearchResultsTable\r\n              playlists={searchedPlaylists}\r\n              isLoading={isLoadingPublicPlaylists}\r\n              onSelect={props.selectPublicPlaylist}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nSelectPublicPlaylistModal.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  searchedPlaylists: PropTypes.array.isRequired,\r\n  isLoadingPublicPlaylists: PropTypes.bool.isRequired,\r\n  className: PropTypes.string,\r\n  selectPublicPlaylist: PropTypes.func.isRequired,\r\n  hide: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ spotify, loading }) => {\r\n  return {\r\n    searchedPlaylists: spotify.searchedPlaylists,\r\n    isLoadingPublicPlaylists: loading.isLoadingPublicPlaylists,\r\n  };\r\n};\r\n\r\nexport default React.memo(connect(mapStateToProps)(SelectPublicPlaylistModal));\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport FeatureSidebar from '../../QuasiTracks/FeatureSidebar';\r\nimport { shouldModalUpdate } from '../../Helpers/modalHelpers';\r\n\r\nconst FeatureModal = props => {\r\n  const { show } = props;\r\n\r\n  return (\r\n    <Modal isOpen={show} toggle={props.hide} className={props.className}>\r\n      <ModalHeader toggle={props.hide}>Features</ModalHeader>\r\n      <ModalBody>\r\n        <FeatureSidebar />\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nFeatureModal.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  className: PropTypes.string,\r\n  hide: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(FeatureModal, shouldModalUpdate());\r\n","// Only update if the modal is open, will be open, or will be closed\nexport const shouldModalUpdate = (showProp = 'show') => (prevProps, nextProps) => {\n  if (prevProps[showProp] === false && nextProps[showProp] === false) {\n    return false;\n  }\n\n  return true;\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FeatureSidebar from '../QuasiTracks/FeatureSidebar';\r\nimport SearchForm from '../Components/Search/SearchForm';\r\nimport { If } from 'react-if';\r\nimport Creatable from 'react-select/creatable/dist/react-select.esm';\r\nimport Button from 'reactstrap/es/Button';\r\nimport _ from 'lodash';\r\nimport { sOrNoS } from '../common';\r\nimport TrackAnalysisResultsTable from '../Components/Tables/TrackAnalysisResultsTable';\r\nimport { areAllTracksSelected, getTrackResults } from '../modules/spotify/selectors';\r\nimport { authActionCreators } from '../modules/auth/actions';\r\nimport { spotifyActionCreators } from '../modules/spotify/actions';\r\nimport { withSizes } from 'react-sizes';\r\nimport { connect } from 'react-redux';\r\nimport SelectArtistModal from '../Components/Modals/SelectArtistModal';\r\nimport QueryType from '../Enums/QueryType';\r\nimport SelectAlbumModal from '../Components/Modals/SelectAlbumModal';\r\nimport SelectPublicPlaylistModal from '../Components/Modals/SelectPublicPlaylistModal';\r\nimport FeatureModal from '../Components/Modals/FeatureModal';\r\n\r\nclass AppContainer extends React.PureComponent {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectSongModalShowing: false,\r\n      selectArtistModalShowing: false,\r\n      isShowingFeatureModal: false,\r\n      query: '',\r\n      queryType: null,\r\n    };\r\n  }\r\n\r\n  render () {\r\n    const { query, queryType, isShowingFeatureModal } = this.state;\r\n    const { tracks, currentUserPlaylists, selectedTracks, selectedPlaylist, allTracksAreSelected, isProcessing } = this.props;\r\n\r\n    const noResults = _.size(tracks) === 0;\r\n\r\n    return (\r\n      <>\r\n        <div style={{ width: '100vw', height: '100vh', display: 'flex', flexDirection: 'row-reverse' }}>\r\n          <div className='features-sidebar features-sidebar-step bg-white' style={{ flex: 3, overflowY: 'auto', paddingTop: 10, paddingBottom: 10 }}>\r\n            <FeatureSidebar />\r\n          </div>\r\n          <div style={{ flex: 10, display: 'flex', flexDirection: 'column', maxWidth: '100%' }}>\r\n            <div className='header bg-gradient-primary'>\r\n              <SearchForm submitArtistSearch={this.submitSearch} />\r\n            </div>\r\n            <div className='results-step' style={{ display: 'flex', flex: 1, overflowY: 'auto', flexDirection: 'column', justifyContent: noResults ? 'center' : undefined }}>\r\n              <If condition={noResults}>\r\n                <h2 className='text-center' style={{ padding: 10 }}>Search for songs using the form above...</h2>\r\n              </If>\r\n              <If condition={!noResults}>\r\n                <div style={{ padding: 10 }}>\r\n                  <div className='table-header-row' style={{ marginBottom: 10 }}>\r\n                    <div className='float-left'>\r\n                      <Creatable\r\n                        className='playlist-select'\r\n                        placeholder='Select a Playlist...'\r\n                        onChange={this.props.selectCurrentUserPlaylist}\r\n                        onCreateOption={this.props.createNewPlaylist}\r\n                        value={selectedPlaylist}\r\n                        options={currentUserPlaylists}\r\n                        styles={{ menu: base => ({ ...base, zIndex: 11 }) }}\r\n                        formatCreateLabel={(value) => `Create Playlist: '${value}'`}\r\n                        classNamePrefix='react-select'\r\n                      />\r\n                    </div>\r\n                    <div className='float-left'>\r\n                      <Button color='secondary' disabled={_.isEmpty(selectedTracks) || !selectedPlaylist} size='sm' onClick={this.addTracksToPlaylist}>Add to Playlist ({_.size(selectedTracks)})</Button>\r\n                    </div>\r\n                    <div className='fill'>\r\n                      <div className='float-right'>\r\n                        <label>Loaded {_.size(tracks)} Track{sOrNoS(tracks)}</label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <TrackAnalysisResultsTable\r\n                    tracks={tracks}\r\n                    isLoading={isProcessing}\r\n                    allTracksAreSelected={allTracksAreSelected}\r\n                    selectedTracks={selectedTracks}\r\n                    setIsSelected={this.props.toggleTrackSelected}\r\n                    globalCheckboxSelected={this.props.globalCheckboxSelected}\r\n                    startPlayingTrack={this.props.startPlayingTrack}\r\n                  />\r\n                </div>\r\n\r\n              </If>\r\n            </div>\r\n            <div className='info-footer'>\r\n                Quasitracks uses the outstanding <a href='https://developer.spotify.com/documentation/web-api/' rel='noopener'>Spotify API</a>. We are in no way affiliated with Spotify.\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className=\"fab-container\"> */}\r\n          {/*  <Button className=\"features-button-step\" color=\"primary\" onClick={this.showFeatureModal}><i className=\"fa fa-headphones\"/> Set Parameters</Button> */}\r\n          {/* </div> */}\r\n        </div>\r\n        <SelectArtistModal\r\n          show={!!query && queryType === QueryType.Artist}\r\n          searchQuery={query}\r\n          selectArtist={this.selectArtist}\r\n          hide={this.hideSearchModal}\r\n        />\r\n\r\n        <SelectAlbumModal\r\n          show={!!query && queryType === QueryType.Album}\r\n          searchQuery={query}\r\n          selectAlbum={this.selectAlbum}\r\n          hide={this.hideSearchModal}\r\n        />\r\n\r\n        <SelectPublicPlaylistModal\r\n          show={!!query && queryType === QueryType.PublicPlaylist}\r\n          searchQuery={query}\r\n          selectPublicPlaylist={this.selectPublicPlaylist}\r\n          hide={this.hideSearchModal}\r\n        />\r\n\r\n        <FeatureModal\r\n          show={isShowingFeatureModal}\r\n          hide={this.hideFeatureModal}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  submitSearch = (e, query, queryType) => {\r\n    e.preventDefault();\r\n\r\n    this.showSearchModal(query, queryType);\r\n  };\r\n\r\n  showFeatureModal = () => {\r\n    this.setState({ isShowingFeatureModal: true });\r\n  };\r\n\r\n  hideFeatureModal = () => {\r\n    this.setState({ isShowingFeatureModal: false });\r\n  };\r\n\r\n  showSearchModal = (query, queryType) => {\r\n    if (!_.trim(query)) {\r\n      return;\r\n    }\r\n\r\n    switch (queryType) {\r\n      case QueryType.Artist: {\r\n        this.props.searchForArtists(query);\r\n        break;\r\n      }\r\n      case QueryType.Album: {\r\n        this.props.searchForAlbums(query);\r\n        break;\r\n      }\r\n      case QueryType.PublicPlaylist: {\r\n        this.props.searchForPublicPlaylists(query);\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.setState({ query: query, queryType: queryType });\r\n  };\r\n\r\n  hideSearchModal = () => {\r\n    this.setState({ queryType: null });\r\n  };\r\n\r\n  selectArtist = (artist) => {\r\n    this.hideSearchModal();\r\n    this.props.selectArtist(artist);\r\n  };\r\n\r\n  selectAlbum = (album) => {\r\n    this.hideSearchModal();\r\n    this.props.selectAlbum(album);\r\n  };\r\n\r\n  selectPublicPlaylist = (playlist) => {\r\n    this.hideSearchModal();\r\n    this.props.selectPublicPlaylist(playlist);\r\n  };\r\n\r\n  addTracksToPlaylist = () => {\r\n    const { selectedPlaylist, selectedTracks, tracks } = this.props;\r\n\r\n    const dtos = _.filter(tracks, ({ id }) => _.has(selectedTracks, id));\r\n\r\n    this.props.addTracksToPlaylist(selectedPlaylist.id, _.map(dtos, 'uri'));\r\n  };\r\n}\r\n\r\nAppContainer.propTypes = {\r\n  selectedPlaylist: PropTypes.object,\r\n  tracks: PropTypes.array.isRequired,\r\n  currentUserPlaylists: PropTypes.array.isRequired,\r\n  allTracksAreSelected: PropTypes.bool.isRequired,\r\n  selectedTracks: PropTypes.object.isRequired,\r\n  globalCheckboxSelected: PropTypes.func.isRequired,\r\n  toggleTrackSelected: PropTypes.func.isRequired,\r\n  selectCurrentUserPlaylist: PropTypes.func.isRequired,\r\n  createNewPlaylist: PropTypes.func.isRequired,\r\n  isProcessing: PropTypes.bool.isRequired,\r\n  addTracksToPlaylist: PropTypes.func.isRequired,\r\n  searchForArtists: PropTypes.func.isRequired,\r\n  searchForAlbums: PropTypes.func.isRequired,\r\n  searchForPublicPlaylists: PropTypes.func.isRequired,\r\n  selectArtist: PropTypes.func.isRequired,\r\n  selectAlbum: PropTypes.func.isRequired,\r\n  selectPublicPlaylist: PropTypes.func.isRequired,\r\n  startPlayingTrack: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { spotify } = state;\r\n  return {\r\n    isProcessing: spotify.isProcessing,\r\n    currentUserPlaylists: spotify.currentUserPlaylists,\r\n    selectedPlaylist: spotify.selectedPlaylist,\r\n    selectedTracks: spotify.selectedTracks,\r\n    tracks: getTrackResults(state),\r\n    allTracksAreSelected: areAllTracksSelected(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setAccessToken: authActionCreators.setAccessToken,\r\n  getCurrentUser: spotifyActionCreators.getCurrentUser,\r\n  setReferenceValue: spotifyActionCreators.setReferenceValue,\r\n  resetFeaturesToReferenceSong: spotifyActionCreators.resetFeaturesToReferenceSong,\r\n  toggleTrackSelected: spotifyActionCreators.toggleTrackSelected,\r\n  globalCheckboxSelected: spotifyActionCreators.globalCheckboxSelected,\r\n  selectArtist: spotifyActionCreators.selectArtist,\r\n  selectAlbum: spotifyActionCreators.selectAlbum,\r\n  selectPublicPlaylist: spotifyActionCreators.selectPublicPlaylist,\r\n  searchForArtists: spotifyActionCreators.searchForArtists,\r\n  searchForAlbums: spotifyActionCreators.searchForAlbums,\r\n  searchForPublicPlaylists: spotifyActionCreators.searchForPublicPlaylists,\r\n  selectCurrentUserPlaylist: spotifyActionCreators.selectCurrentUserPlaylist,\r\n  createNewPlaylist: spotifyActionCreators.createNewPlaylist,\r\n  startProcessing: spotifyActionCreators.startProcessing,\r\n  startPlayingTrack: spotifyActionCreators.startPlayingTrack,\r\n  getCurrentUsersPlaylists: spotifyActionCreators.getCurrentUsersPlaylists,\r\n  addTracksToPlaylist: spotifyActionCreators.addTracksToPlaylist,\r\n};\r\n\r\nconst mapSizesToProps = ({ width }) => ({\r\n  isMobile: width < 992,\r\n});\r\n\r\nexport default withSizes(mapSizesToProps)(connect(mapStateToProps, mapDispatchToProps)(AppContainer));\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { If } from 'react-if';\nimport { authActionCreators } from './modules/auth/actions';\nimport LoginContainer from './Containers/LoginContainer';\nimport LoadingUserContainer from './Containers/LoadingUserContainer';\nimport AppContainer from './Containers/AppContainer';\nimport { spotifyActionCreators } from './modules/spotify/actions';\n\nclass App extends React.PureComponent {\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (!prevProps.currentUserIsLoaded && this.props.currentUserIsLoaded) {\n      this.props.getCurrentUsersPlaylists();\n    }\n  }\n\n  render () {\n    const { userIsLoggedIn, currentUserIsLoaded } = this.props;\n\n    return (\n      <div className='main-content' ref='mainContent'>\n        <If condition={!userIsLoggedIn}>\n          <LoginContainer />\n        </If>\n        <If condition={userIsLoggedIn && !currentUserIsLoaded}>\n          <LoadingUserContainer />\n        </If>\n        <If condition={userIsLoggedIn && currentUserIsLoaded}>\n          <AppContainer />\n        </If>\n\n      </div>\n    );\n  }\n\n  componentDidMount () {\n    const accessToken = App.getQueryVariable(window.location.hash.substring(1), 'access_token');\n\n    if (accessToken) {\n      this.props.setAccessToken(accessToken);\n      this.props.getCurrentUser();\n    }\n  }\n\n  static getQueryVariable (queryString, variable) {\n    const vars = queryString.split('&');\n    for (let i = 0; i < vars.length; i++) {\n      const pair = vars[i].split('=');\n      if (decodeURIComponent(pair[0]) === variable) {\n        return decodeURIComponent(pair[1]);\n      }\n    }\n\n    return null;\n  }\n}\n\nconst mapStateToProps = ({ auth, spotify }) => {\n  return {\n    userIsLoggedIn: !!auth.accessToken,\n    currentUserIsLoaded: !!spotify.currentUser,\n  };\n};\n\nconst mapDispatchToProps = {\n  setAccessToken: authActionCreators.setAccessToken,\n  getCurrentUser: spotifyActionCreators.getCurrentUser,\n  getCurrentUsersPlaylists: spotifyActionCreators.getCurrentUsersPlaylists,\n};\n\nApp.propTypes = {\n  userIsLoggedIn: PropTypes.bool.isRequired,\n  currentUserIsLoaded: PropTypes.bool.isRequired,\n  setAccessToken: PropTypes.func.isRequired,\n  getCurrentUser: PropTypes.func.isRequired,\n  getCurrentUsersPlaylists: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport './scss/quasi-tracks.scss';\n\nimport reducer from './modules/reducer';\nimport middleware from './modules/middleware';\n\nimport App from './App';\n\nconst store = createStore(reducer, _.includes(window.location.host, 'localhost') ? composeWithDevTools(middleware) : middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}